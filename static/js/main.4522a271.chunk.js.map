{"version":3,"sources":["components/layout/Header.js","components/Home.js","components/NoMatch.js","components/vitamins/VitaminsList.js","components/vitamins/VitaminDetail.js","components/vitamins/Vitamins.js","routes/Routes.js","components/layout/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Home","NoMatch","VitaminsList","href","VitaminDetail","Vitamins","vitamins_VitaminsList","vitamins_VitaminDetail","Routes","Switch","Route","exact","path","component","Main","routes_Routes","App","components_layout_Header","components_layout_Main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAaeA,gMARX,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,8BAJaE,sCCUNC,0LARX,OACEL,EAAAC,EAAAC,cAAA,4CAHaE,cCUJE,0LARX,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BAJcE,cCaPG,mLAXX,OACEP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,QAAR,cACJR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,QAAR,cACJR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,QAAR,cACJR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,QAAR,sBAPeJ,aCiBZK,mLAhBX,OACET,EAAAC,EAAAC,cAAA,ojDAHsBE,aCabM,mLATX,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACU,EAAD,cALeR,aCcRS,mLAVX,OACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjCL,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWR,IACzCV,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOG,UAAWZ,YANLF,aCQNe,mLARX,OACEnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAACkB,EAAD,cAJWhB,aCYJiB,mLATX,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,cALUnB,aCOEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OACP9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAD,OAEDC,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4522a271.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"Header\">\n        <h1>Vitamins</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './Home.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        This is the home page.\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport './NoMatch.css';\n\nclass NoMatch extends Component {\n  render() {\n    return (\n      <div>\n        <h2>4 0 4</h2>\n      </div>\n    );\n  }\n}\n\nexport default NoMatch;","import React, { Component } from 'react'\n\n\nclass VitaminsList extends Component {\n  render() {\n    return (\n      <ul>\n        <li><a href=\"#el1\">Element 1</a></li>\n        <li><a href=\"#el2\">Element 2</a></li>\n        <li><a href=\"#el3\">Element 3</a></li>\n        <li><a href=\"#el4\">Element 4</a></li>\n      </ul>\n    );\n  }\n}\n\nexport default VitaminsList;","import React, { Component } from 'react'\n\nclass VitaminDetail extends Component {\n  render() {\n    return (\n      <div>\n        Aliquip mollit dolor exercitation aliqua incididunt nisi laboris elit est laboris dolor. Irure qui enim consequat et esse duis dolore aliqua velit non quis cillum. Ea exercitation dolore ad qui et nulla mollit et excepteur duis.\n\n        Consequat esse in aliqua sunt. Ad consectetur adipisicing ut ad id commodo quis veniam est. Sint adipisicing eu anim anim nostrud in mollit. Commodo commodo elit sunt ipsum qui deserunt dolor.\n\n        Adipisicing consectetur cillum anim officia in laborum minim voluptate reprehenderit tempor voluptate labore. Nostrud fugiat est officia quis nisi mollit consequat dolor. Laborum laborum ut do minim labore ea ut aliquip sint Lorem minim ut do. Magna nostrud consequat Lorem et fugiat irure irure aliquip excepteur non fugiat irure dolor.\n\n        Velit Lorem eiusmod cupidatat mollit mollit nisi laborum. Consectetur mollit ad Lorem veniam culpa commodo cupidatat quis. Irure qui Lorem veniam est consectetur ad nostrud est in ullamco do sint. Ullamco id commodo sunt ea sunt amet aliquip consequat laboris ex ipsum enim ut. Exercitation nisi officia veniam sint anim mollit et commodo nostrud aute incididunt nisi dolore. Dolor cillum officia ut cupidatat occaecat consequat dolore cupidatat et dolor qui. Eu magna aliquip non ut sit ad aute ad officia.\n\n        Pariatur minim aliquip occaecat occaecat ullamco esse qui Lorem. Est consequat esse excepteur fugiat anim occaecat irure veniam quis ex proident occaecat. Culpa do non nostrud duis irure dolor non magna anim irure nulla fugiat deserunt. Aliqua cupidatat quis incididunt proident consequat minim ut.\n      </div>\n    );\n  }\n}\n\nexport default VitaminDetail;","import React, { Component } from 'react';\nimport VitaminsList from './VitaminsList';\nimport VitaminsDetail from './VitaminDetail';\n\nclass Vitamins extends Component {\n  render() {\n    return (\n      <div>\n        <VitaminsList></VitaminsList>\n        <VitaminsDetail></VitaminsDetail>\n      </div>\n    );\n  }\n}\n\nexport default Vitamins;","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom';\nimport Home from '../components/Home';\nimport NoMatch from '../components/NoMatch';\nimport Vitamins from '../components/vitamins/Vitamins';\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={Home}></Route>\n        <Route exact path=\"/vitamins\" component={Vitamins}></Route>\n        <Route component={NoMatch} />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;","import React, { Component } from 'react';\nimport './Main.css';\nimport Routes from '../../routes/Routes'\n\nclass Main extends Component {\n  render() {\n    return (\n      <main className=\"Main\">\n        <Routes></Routes>\n      </main>\n    );\n  }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport Main from './components/layout/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header></Header>\n        <Main></Main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App></App>\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}